##
##  k8s-sample -- Kubernetes Sample Application
##  Copyright (c) 2019-2020 Dr. Ralf S. Engelschall <rse@engelschall.com>
##  Distributed under MIT license <https://spdx.org/licenses/MIT.html>
##


---
{{- if .Values.app.service.url }}
#   traffic ingress for service
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
    namespace: {{ template "package.namespace" . }}
    name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
    labels:
        pkg: {{ template "package.fullname" . }}
        tier: {{ .Values.app.name }}
    annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
    rules:
        {{- if .Values.app.service.host }}
        -   host: {{ .Values.app.service.host }}
            http:
        {{- else }}
        -   http:
        {{- end }}
                paths:
                    -   pathType: ImplementationSpecific
                        path: {{ default "/" .Values.app.service.url }}/?(.*)
                        backend:
                            service:
                                name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
                                port: 
                                    number: {{ .Values.app.service.port }}
{{- end }}

---
#   service for pods
apiVersion: v1
kind: Service
metadata:
    namespace: {{ template "package.namespace" . }}
    name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
    labels:
        pkg: {{ template "package.fullname" . }}
        tier: {{ .Values.app.name }}
spec:
    type: {{ .Values.app.service.type }}
    selector:
        pkg: {{ template "package.fullname" . }}
        tier: {{ .Values.app.name }}
    ports:
        -   protocol: {{ .Values.app.service.protocol }}
            port: {{ .Values.app.service.port }}
            targetPort: default

---
#   stateful set of pods
apiVersion: apps/v1
kind: StatefulSet
metadata:
    namespace: {{ template "package.namespace" . }}
    name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
    labels:
        pkg: {{ template "package.fullname" . }}
        tier: {{ .Values.app.name }}
spec:
    selector:
        matchLabels:
            pkg: {{ template "package.fullname" . }}
            tier: {{ .Values.app.name }}
    serviceName: {{ .Values.app.name }}
    replicas: {{ .Values.app.container.replicas }}
    template:
        metadata:
            labels:
                pkg: {{ template "package.fullname" . }}
                tier: {{ .Values.app.name }}
        spec:
            restartPolicy: {{ .Values.app.container.restart }}
            {{- if .Values.app.init }}
            initContainers:
                -   name:    {{ template "package.fullname" . }}-{{ .Values.app.name }}-init
                    image:   {{ .Values.app.init.image }}:{{ .Values.app.init.tag }}
                    command:
                        {{- range .Values.app.init.command }}
                        -   {{ . | quote }}
                        {{- end }}
                    volumeMounts:
                        -   name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
                            mountPath: {{ .Values.app.storage.path }}
            {{- end }}
            containers:
                -   name:  {{ template "package.fullname" . }}-{{ .Values.app.name }}
                    image: {{ .Values.app.container.image }}:{{ .Values.app.container.tag }}
                    args:
                        {{- if .Values.db.enabled }}
                        {{- range .Values.app.container.args.db }}
                        -   {{ . | quote }}
                        {{- end }}
                        {{- else }}
                        {{- range .Values.app.container.args.default }}
                        -   {{ . | quote }}
                        {{- end }}
                        {{- end }}
                    env:
                        {{- if .Values.db.enabled }}
                        {{- range $key, $val := .Values.app.container.env.db }}
                        -   name:  {{ $key | quote }}
                            value: {{ $val | quote }}
                        {{- end }}
                        {{- else }}
                        {{- range $key, $val := .Values.app.container.env.default }}
                        -   name:  {{ $key | quote }}
                            value: {{ $val | quote }}
                        {{- end }}
                        {{- end }}
                    ports:
                        -   name: default
                            protocol: {{ .Values.app.service.protocol }}
                            containerPort: {{ .Values.app.service.port }}
                    volumeMounts:
                        -   name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
                            mountPath: {{ .Values.app.storage.path }}
            {{- if .Values.app.storage.gid }}
            securityContext:
                fsGroup: {{ .Values.app.storage.gid }}
            {{- end }}
            {{- if .Values.app.storage.shared }}
            volumes:
                -   name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
                    persistentVolumeClaim:
                        claimName: {{ template "package.fullname" . }}-{{ .Values.app.name }}
            {{- end }}
    {{- if not .Values.app.storage.shared }}
    volumeClaimTemplates:
        -   metadata:
                namespace: {{ template "package.namespace" . }}
                name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
                labels:
                    pkg: {{ template "package.fullname" . }}
                    tier: {{ .Values.app.name }}
            spec:
                accessModes:
                    - ReadWriteOnce
                {{- if .Values.app.storage.mode }}
                volumeMode: {{ .Values.app.storage.mode }}
                {{- end }}
                {{- if .Values.app.storage.type }}
                storageClassName: {{ .Values.app.storage.type }}
                {{- end }}
                resources:
                    requests:
                        storage: {{ .Values.app.storage.size }}
    {{- end }}

---
{{- if .Values.app.storage.shared }}
#   persistent volume claim, needed for "shared DB. The (only) volume prepared 
#   by this PVC is then used by all pods.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    namespace: {{ template "package.namespace" . }}
    name: {{ template "package.fullname" . }}-{{ .Values.app.name }}
    labels:
        pkg: {{ template "package.fullname" . }}
        tier: {{ .Values.app.name }}
spec:
    accessModes:
        - ReadWriteMany
    {{- if .Values.app.storage.mode }}
    volumeMode: {{ .Values.app.storage.mode }}
    {{- end }}
    {{- if .Values.app.storage.type }}
    storageClassName: {{ .Values.app.storage.type }}
    {{- end }}
    resources:
        requests:
            storage: {{ .Values.app.storage.size }}
{{- end }}

